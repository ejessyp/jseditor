config={{
toolbar: [ 'heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote' ],
heading: {
options: [
{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
{ model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
{ model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' }
]
}}
}


test@123.com
npm install --save @ckeditor/ckeditor5-react @ckeditor/ckeditor5-build-decoupled-document
 @ckeditor/ckeditor5-react
, '|', 'alignment:left', 'alignment:right', 'alignment:center', 'alignment:justify'

Navigation.js
import React, { useEffect } from 'react';
import { Link} from 'react-router-dom';


 const  Navigation = () => {
    // {setisLogin(sessionStorage.getItem('email') ?  "show" : "hidden")}
    // const [isLogin, setisLogin] = useState("hidden");
    // const [isLogin, setisLogin] = useState("hidden");

    useEffect(() => {
        const email =   sessionStorage.getItem("email") ? "showFileMenu"  :  "hidden" ;
        const el= document.getElementById("file");
        el.classList.add(email);

    });

    return (

        <nav>
            <ul>
                <li>
                    <Link to={`${process.env.PUBLIC_URL}/login`} >Login</Link>
                </li>
                <li>
                    <Link to={`${process.env.PUBLIC_URL}/register`} >Register</Link>
                </li>
                <li  id="file">
                    <Link to={`${process.env.PUBLIC_URL}/file`} >File</Link>
                </li>
                <li>
                    <Link to={`${process.env.PUBLIC_URL}/about`} >About</Link>
                </li>
            </ul>
        </nav>
    );
};

export default Navigation;



efo@bth.se och emil.folino@bth.se



<CKEditor
editor={ ClassicEditor }
config={{
    toolbar: ['undo', 'redo', '|', 'heading', '|', 'bold', 'italic', 'blockQuote', 'link', 'numberedList', 'bulletedList', 'imageUpload', 'insertTable',
    'tableColumn', 'tableRow', 'mergeTableCells', 'mediaEmbed']
}}
data = { this.state.currentContent }
onReady={ editor => {
    // You can store the "editor" and use when it is needed.
    // console.log( 'Editor is ready to use!', editor );
} }

onChange={ ( event, editor ) => {
    editorData = editor.getData();
    window.editorData = editorData;
} }
/>


https://ckeditor.com/docs/ckfinder/ckfinder3-php/quickstart.html


<div className="isOpenedContent">{this.state.isOpenedContent ?

    <form onSubmit={this.handleAllowedSubmit}>
    <label>
    Select allowed user:
    <select  value={this.state.value} onChange={this.handleChange}>
    <option value="">Select a user</option>
    {users.map((e,i) => (
        <option key={i} value={e.email}>{e.email}</option>)
    )}
    </select>

    <input className="savebutton" type="submit" value="Submit" />

    </label>
    </form>
    : null }

</div>


let fruits = ['Apple', 'Banana']
fruits.forEach(function(item, index, array) {
  console.log(item, index)
})

How to Test GraphQL Server Using Mocha and Chai
https://hackernoon.com/how-to-test-graphql-server-using-mocha-and-chai-f5a10956e71a
